plugins {
    id 'application'
    id 'org.jetbrains.kotlin.jvm'
    id 'org.jetbrains.kotlin.plugin.serialization'
    id 'com.github.johnrengelman.shadow'
    id 'com.adarshr.test-logger'
    id 'org.jmailen.kotlinter'
}

application {
    mainClassName = 'exporter.Exporter'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

dependencies {
    implementation 'org.jetbrains.kotlin:kotlin-stdlib'
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-core:1.3.2"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.1"

    implementation "io.prometheus:simpleclient:0.15.0"
    implementation "io.prometheus:simpleclient_httpserver:0.15.0"
    implementation 'com.glispa.combo:combo-core:1.4.1'

    implementation "info.picocli:picocli:4.6.3"
    implementation "com.charleskorn.kaml:kaml:0.43.0"

    implementation 'log4j:log4j:1.2.17'
    implementation 'org.slf4j:slf4j-log4j12:1.7.7'

    testImplementation "io.kotest:kotest-assertions-core-jvm:5.2.3"
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.8.2"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.8.2"
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        freeCompilerArgs += [
          '-Xopt-in=kotlin.RequiresOptIn',
          '-Xopt-in=kotlinx.serialization.ExperimentalSerializationApi',
          '-Xopt-in=kotlinx.coroutines.ObsoleteCoroutinesApi',
        ]
    }
}

test {
  useJUnitPlatform()
  testlogger {
      theme 'mocha'
      showExceptions true
      slowThreshold 10000
  }
}

run {
  if (System.getenv('LOG_LEVEL')) {
    systemProperties['log4j.log.level'] = System.getenv('LOG_LEVEL')
  }
}

shadowJar {
  zip64 true
}
