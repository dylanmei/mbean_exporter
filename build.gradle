plugins {
    // Apply the Kotlin JVM plugin to add support for Kotlin.
    id 'org.jetbrains.kotlin.jvm' version '1.3.70'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.3.70'

    // Apply the application plugin to add support for building a CLI application.
    id 'application'

    id 'com.adarshr.test-logger' version '2.0.0'
    id 'com.github.johnrengelman.shadow' version '5.2.0'
}

repositories {
    jcenter()
    maven { url 'https://plugins.gradle.org/m2/' }
}

dependencies {
    implementation 'org.jetbrains.kotlin:kotlin-stdlib'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.5'
    implementation 'org.jetbrains.kotlinx:kotlinx-serialization-runtime:0.20.0'

    implementation 'io.prometheus:simpleclient:0.8.1'
    implementation 'io.prometheus:simpleclient_httpserver:0.8.1'
    implementation 'com.glispa.combo:combo-core:1.4.1'

    implementation 'info.picocli:picocli:4.1.4'
    implementation 'com.charleskorn.kaml:kaml:0.17.0'

    implementation 'log4j:log4j:1.2.17'
    implementation 'org.slf4j:slf4j-log4j12:1.7.7'

    testImplementation 'io.kotest:kotest-assertions-core-jvm:4.0.3'
    testImplementation 'io.kotest:kotest-runner-junit5-jvm:4.0.3'
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "11"
        freeCompilerArgs += [
          "-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi",
          "-Xuse-experimental=kotlinx.coroutines.ObsoleteCoroutinesApi"]
    }
}

application {
    mainClassName = 'exporter.Exporter'
}

test {
  useJUnitPlatform()
}

testlogger {
    theme 'mocha'
    showExceptions true
    slowThreshold 10000
}

shadowJar {
  zip64 true
}
